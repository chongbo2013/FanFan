package com.fanfan.robot.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fanfan.robot.model.VideoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "VIDEO_BEAN".
*/
public class VideoBeanDao extends AbstractDao<VideoBean, Long> {

    public static final String TABLENAME = "VIDEO_BEAN";

    /**
     * Properties of entity VideoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LocalType = new Property(1, int.class, "localType", false, "localType");
        public final static Property SaveTime = new Property(2, long.class, "saveTime", false, "saveTime");
        public final static Property ShowTitle = new Property(3, String.class, "showTitle", false, "showTitle");
        public final static Property VideoName = new Property(4, String.class, "videoName", false, "videoName");
        public final static Property Size = new Property(5, long.class, "size", false, "size");
        public final static Property VideoUrl = new Property(6, String.class, "videoUrl", false, "videoUrl");
        public final static Property VideoImage = new Property(7, String.class, "videoImage", false, "videoImage");
    }


    public VideoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public VideoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"VIDEO_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"localType\" INTEGER NOT NULL ," + // 1: localType
                "\"saveTime\" INTEGER NOT NULL ," + // 2: saveTime
                "\"showTitle\" TEXT," + // 3: showTitle
                "\"videoName\" TEXT," + // 4: videoName
                "\"size\" INTEGER NOT NULL ," + // 5: size
                "\"videoUrl\" TEXT," + // 6: videoUrl
                "\"videoImage\" TEXT);"); // 7: videoImage
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"VIDEO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VideoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLocalType());
        stmt.bindLong(3, entity.getSaveTime());
 
        String showTitle = entity.getShowTitle();
        if (showTitle != null) {
            stmt.bindString(4, showTitle);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(5, videoName);
        }
        stmt.bindLong(6, entity.getSize());
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(7, videoUrl);
        }
 
        String videoImage = entity.getVideoImage();
        if (videoImage != null) {
            stmt.bindString(8, videoImage);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VideoBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLocalType());
        stmt.bindLong(3, entity.getSaveTime());
 
        String showTitle = entity.getShowTitle();
        if (showTitle != null) {
            stmt.bindString(4, showTitle);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(5, videoName);
        }
        stmt.bindLong(6, entity.getSize());
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(7, videoUrl);
        }
 
        String videoImage = entity.getVideoImage();
        if (videoImage != null) {
            stmt.bindString(8, videoImage);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VideoBean readEntity(Cursor cursor, int offset) {
        VideoBean entity = new VideoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // localType
            cursor.getLong(offset + 2), // saveTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // showTitle
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // videoName
            cursor.getLong(offset + 5), // size
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // videoUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // videoImage
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VideoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLocalType(cursor.getInt(offset + 1));
        entity.setSaveTime(cursor.getLong(offset + 2));
        entity.setShowTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVideoName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSize(cursor.getLong(offset + 5));
        entity.setVideoUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setVideoImage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VideoBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VideoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VideoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
