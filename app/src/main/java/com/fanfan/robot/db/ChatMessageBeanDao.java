package com.fanfan.robot.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fanfan.robot.model.ChatMessageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_MESSAGE_BEAN".
*/
public class ChatMessageBeanDao extends AbstractDao<ChatMessageBean, Long> {

    public static final String TABLENAME = "CHAT_MESSAGE_BEAN";

    /**
     * Properties of entity ChatMessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "UserId", false, "UserId");
        public final static Property UserName = new Property(2, String.class, "UserName", false, "UserName");
        public final static Property UserHeadIcon = new Property(3, String.class, "UserHeadIcon", false, "UserHeadIcon");
        public final static Property Time = new Property(4, String.class, "time", false, "time");
        public final static Property Type = new Property(5, int.class, "type", false, "type");
        public final static Property Messagetype = new Property(6, int.class, "messagetype", false, "messagetype");
        public final static Property MessageContent = new Property(7, String.class, "messageContent", false, "messageContent");
        public final static Property SendState = new Property(8, int.class, "sendState", false, "sendState");
        public final static Property ImageUrl = new Property(9, String.class, "imageUrl", false, "imageUrl");
        public final static Property ImageLocal = new Property(10, String.class, "imageLocal", false, "imageLocal");
        public final static Property VoiceType = new Property(11, String.class, "voiceType", false, "voiceType");
        public final static Property VoiceAnswer = new Property(12, String.class, "voiceAnswer", false, "voiceAnswer");
        public final static Property Action = new Property(13, String.class, "action", false, "action");
        public final static Property Expression = new Property(14, String.class, "expression", false, "expression");
        public final static Property ActionData = new Property(15, String.class, "actionData", false, "actionData");
        public final static Property ExpressionData = new Property(16, String.class, "expressionData", false, "expressionData");
        public final static Property VideoName = new Property(17, String.class, "videoName", false, "videoName");
        public final static Property VideoUrl = new Property(18, String.class, "videoUrl", false, "videoUrl");
    }


    public ChatMessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChatMessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UserId\" TEXT," + // 1: UserId
                "\"UserName\" TEXT," + // 2: UserName
                "\"UserHeadIcon\" TEXT," + // 3: UserHeadIcon
                "\"time\" TEXT," + // 4: time
                "\"type\" INTEGER NOT NULL ," + // 5: type
                "\"messagetype\" INTEGER NOT NULL ," + // 6: messagetype
                "\"messageContent\" TEXT," + // 7: messageContent
                "\"sendState\" INTEGER NOT NULL ," + // 8: sendState
                "\"imageUrl\" TEXT," + // 9: imageUrl
                "\"imageLocal\" TEXT," + // 10: imageLocal
                "\"voiceType\" TEXT," + // 11: voiceType
                "\"voiceAnswer\" TEXT," + // 12: voiceAnswer
                "\"action\" TEXT," + // 13: action
                "\"expression\" TEXT," + // 14: expression
                "\"actionData\" TEXT," + // 15: actionData
                "\"expressionData\" TEXT," + // 16: expressionData
                "\"videoName\" TEXT," + // 17: videoName
                "\"videoUrl\" TEXT);"); // 18: videoUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_MESSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatMessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(2, UserId);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(3, UserName);
        }
 
        String UserHeadIcon = entity.getUserHeadIcon();
        if (UserHeadIcon != null) {
            stmt.bindString(4, UserHeadIcon);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getMessagetype());
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(8, messageContent);
        }
        stmt.bindLong(9, entity.getSendState());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(10, imageUrl);
        }
 
        String imageLocal = entity.getImageLocal();
        if (imageLocal != null) {
            stmt.bindString(11, imageLocal);
        }
 
        String voiceType = entity.getVoiceType();
        if (voiceType != null) {
            stmt.bindString(12, voiceType);
        }
 
        String voiceAnswer = entity.getVoiceAnswer();
        if (voiceAnswer != null) {
            stmt.bindString(13, voiceAnswer);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(14, action);
        }
 
        String expression = entity.getExpression();
        if (expression != null) {
            stmt.bindString(15, expression);
        }
 
        String actionData = entity.getActionData();
        if (actionData != null) {
            stmt.bindString(16, actionData);
        }
 
        String expressionData = entity.getExpressionData();
        if (expressionData != null) {
            stmt.bindString(17, expressionData);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(18, videoName);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(19, videoUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatMessageBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String UserId = entity.getUserId();
        if (UserId != null) {
            stmt.bindString(2, UserId);
        }
 
        String UserName = entity.getUserName();
        if (UserName != null) {
            stmt.bindString(3, UserName);
        }
 
        String UserHeadIcon = entity.getUserHeadIcon();
        if (UserHeadIcon != null) {
            stmt.bindString(4, UserHeadIcon);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
        stmt.bindLong(6, entity.getType());
        stmt.bindLong(7, entity.getMessagetype());
 
        String messageContent = entity.getMessageContent();
        if (messageContent != null) {
            stmt.bindString(8, messageContent);
        }
        stmt.bindLong(9, entity.getSendState());
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(10, imageUrl);
        }
 
        String imageLocal = entity.getImageLocal();
        if (imageLocal != null) {
            stmt.bindString(11, imageLocal);
        }
 
        String voiceType = entity.getVoiceType();
        if (voiceType != null) {
            stmt.bindString(12, voiceType);
        }
 
        String voiceAnswer = entity.getVoiceAnswer();
        if (voiceAnswer != null) {
            stmt.bindString(13, voiceAnswer);
        }
 
        String action = entity.getAction();
        if (action != null) {
            stmt.bindString(14, action);
        }
 
        String expression = entity.getExpression();
        if (expression != null) {
            stmt.bindString(15, expression);
        }
 
        String actionData = entity.getActionData();
        if (actionData != null) {
            stmt.bindString(16, actionData);
        }
 
        String expressionData = entity.getExpressionData();
        if (expressionData != null) {
            stmt.bindString(17, expressionData);
        }
 
        String videoName = entity.getVideoName();
        if (videoName != null) {
            stmt.bindString(18, videoName);
        }
 
        String videoUrl = entity.getVideoUrl();
        if (videoUrl != null) {
            stmt.bindString(19, videoUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatMessageBean readEntity(Cursor cursor, int offset) {
        ChatMessageBean entity = new ChatMessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // UserName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // UserHeadIcon
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.getInt(offset + 5), // type
            cursor.getInt(offset + 6), // messagetype
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // messageContent
            cursor.getInt(offset + 8), // sendState
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // imageUrl
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // imageLocal
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // voiceType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // voiceAnswer
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // action
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // expression
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // actionData
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // expressionData
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // videoName
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // videoUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatMessageBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserHeadIcon(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
        entity.setMessagetype(cursor.getInt(offset + 6));
        entity.setMessageContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSendState(cursor.getInt(offset + 8));
        entity.setImageUrl(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImageLocal(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVoiceType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setVoiceAnswer(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAction(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setExpression(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setActionData(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setExpressionData(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setVideoName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setVideoUrl(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatMessageBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatMessageBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatMessageBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
